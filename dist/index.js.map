{"version":3,"sources":["../src/index.js"],"names":["app","server","http","createServer","io","use","exposedHeaders","env","corsHeaders","bodyParser","json","limit","bodyLimit","db","listen","process","PORT","port","console","log","address","axios","Axios","create","baseURL","apiUrl","users","on","socket","user","emit","data","get","params","utoken","then","resp","status","filter","v","u_id","push","setTimeout","Object","keys","forEach","k","am_id","peer_id","event","userDisconnect","splice"],"mappings":"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","file":"index.js","sourcesContent":["import http from 'http';\nimport express from 'express';\nimport cors from 'cors';\nimport morgan from 'morgan';\nimport bodyParser from 'body-parser';\nimport initializeDb from './db';\nimport middleware from './middleware';\nimport publicRoute from './api/public'\nimport api from './api';\nimport env from './env';\nimport socketio from 'socket.io';\nimport Axios from 'axios';\n\nlet app = express();\napp.server = http.createServer(app);\nlet io = socketio(app.server);\n\n// logger\napp.use(morgan('dev'));\n\n// 3rd party middleware\napp.use(cors({\n\texposedHeaders: env.corsHeaders\n}));\n\napp.use(bodyParser.json({\n\tlimit : env.bodyLimit\n}));\n\n// connect to db\ninitializeDb( db => {\n\n\t// internal middleware\n\tapp.use(middleware({ env, db }));\n\n\t// public router\n\tapp.use('/', publicRoute({ env, db }));\n\n\t// api router\n\tapp.use('/api', api({ env, db }));\n\n\tapp.server.listen(process.env.PORT || env.port, () => {\n\t\tconsole.log(`Started on port ${app.server.address().port}`);\n\t});\n});\n\nconst axios = Axios.create({\n\tbaseURL: env.apiUrl\n});\n\nvar users = []\nio.on('connection', function (socket) {\n\tvar user = {}\n\tio.emit(\"connected\")\n\tio.emit(\"usersConnected\", {users:users})\n\tsocket.on('user', function (data) {\n\t\taxios.get(\"/profile\",{params:{utoken:data.utoken}}).then((resp)=>{\n\t\t\tuser = resp.data.user\n\t\t\tuser.status = \"on\"\n\t\t\t// console.log(\"connected : \"+user.u_id)\n\t\t\tio.emit('userConnected', {user:user});\n\t\t\tif(!users.filter(v=>{ return v.u_id == user.u_id })[0]){\n\t\t\t\tusers.push(user)\n\t\t\t}\n\t\t\tsetTimeout(()=>{ io.emit(\"usersConnected\", {users:users}) }, 100)\n\t\t})\n\t});\n\tsocket.on(\"userUpdate\", (data)=>{\n\t\tif(!user.u_id) return;\n\t\tObject.keys(data).forEach(k=>{ user[k] = data[k] })\n\t\tusers.forEach((v,k)=>{ if(v.u_id == user.u_id) users[k] = user })\n\t\tif(data.am_id&&data.peer_id) io.emit(\"joinCall\", user)\n\t\tif(data.peer_id===\"\") io.emit(\"exitCall\", user)\n\t\tsetTimeout(()=>{ io.emit(\"usersConnected\", {users:users}) }, 100)\n\t})\n\tsocket.on(\"userEvent\", (data)=>{\n\t\tif(!user.u_id) return;\n\t\tio.emit(data.event, data)\n\t})\n\tsocket.on('disconnect', ()=>{\n\t\tuserDisconnect()\n\t})\n\tsocket.on(\"userDisconnect\", ()=>{\n\t\tuserDisconnect()\n\t})\n\tvar userDisconnect = ()=>{\n\t\tif(user.u_id){\n\t\t\t// console.log(\"disconnect :\"+user.u_id)\n\t\t\tusers.forEach((v,k)=>{\n\t\t\t\tif(v.u_id == user.u_id) users.splice(k,1)\n\t\t\t})\n\t\t\tio.emit('userDisconnected', user);\n\t\t\tio.emit(\"usersConnected\", {users:users})\n\t\t}\n\t}\n});\n\nexport default app;\n"]}